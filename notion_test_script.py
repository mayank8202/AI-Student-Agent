from notion_client import Client
import os
import openai
from openai import OpenAI
from dotenv import load_dotenv
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(
    # defaults to os.environ.get("OPENAI_API_KEY")
        api_key=os.getenv("OPENAI_API_KEY"),
    )
NOTION_API_TOKEN = os.getenv("NOTION_API_TOKEN")
NOTION_PAGE_ID = os.getenv("NOTION_PAGE_ID")  # Replace with your target page ID or database ID
notion = Client(auth=NOTION_API_TOKEN)
def openai_make_notes(transcript):
    
    """
    Use OpenAI to generate notes given a transcript.
    """
    prompt = f"""
    You are a helpful notetaker. Analyze the following transcript from a university class.
    "{transcript}"

    Format the notes with headings, bullet points, and key action items where applicable. Make it comprehensive and do your best to clean and adjust any possible mistranscripted words based on potential context. Only answer with the notes format, don't say anything else
    """
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",  # Use a suitable OpenAI GPT model
            messages=[
                {"role": "system", "content": "You are a helpful notetaker. Analyze the following transcript from a university class."},
                {"role": "user", "content": prompt},
            ],
            max_tokens=3000,   # Adjust based on the expected response length
            top_p=1.0,        # Full probability distribution
            frequency_penalty=0,  # No penalty for frequent tokens
            presence_penalty=0    # No penalty for introducing new topics
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"Error querying OpenAI: {e}")
        return "I'm sorry, there was an error processing the request."
def notes_to_notion(notion_blocks):
    try:
        response = notion.pages.create(
            parent={"type": "page_id", "page_id": NOTION_PAGE_ID},
            properties={
                "title": [
                    {"type": "text", "text": {"content": "Generated Notes from Transcript"}}
                ]
            },
            children=notion_blocks,
        )
        print("Notes successfully added to Notion!")
    except Exception as e:
        print(f"Error sending notes to Notion: {e}")
def format_notes_for_notion(notes):
    """
    Convert the notes into Notion blocks for structured formatting.

    Args:
        notes (str): The structured notes generated by GPT-4.
    Returns:
        list: A list of Notion blocks to send to the Notion API.
    """
    # Split the notes by lines and create blocks
    blocks = []
    for line in notes.split("\n"):
        if line.startswith("# "):  # Convert headings
            blocks.append({
                "object": "block",
                "type": "heading_1",
                "heading_1": {
                    "rich_text": [{"type": "text", "text": {"content": line[2:]}}],
                },
            })
        elif line.startswith("## "):  # Convert subheadings
            blocks.append({
                "object": "block",
                "type": "heading_2",
                "heading_2": {
                    "rich_text": [{"type": "text", "text": {"content": line[3:]}}],
                },
            })
        elif line.startswith("### "):  # Convert sub-subheadings
            blocks.append({
                "object": "block",
                "type": "heading_3",
                "heading_3": {
                    "rich_text": [{"type": "text", "text": {"content": line[4:]}}],
                },
            })
        elif line.startswith("- "):  # Convert bullet points
            blocks.append({
                "object": "block",
                "type": "bulleted_list_item",
                "bulleted_list_item": {
                    "rich_text": [{"type": "text", "text": {"content": line[2:]}}],
                },
            })
        elif line.strip():  # Convert paragraphs
            blocks.append({
                "object": "block",
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [{"type": "text", "text": {"content": line.strip()}}],
                },
            })
    return blocks

    
if __name__ == "__main__":

    transcript = "Hi, my name is Justin. So Justin, what is a neural network? A neural network is a computational model inspired by the human brain used to recognize patterns and solve complex problems. That is correct. So we use multiple kinds of architectures such as TNNs, RNNs, and CNNs depending on the use case. So first use case example is a sports betting algorithm. In that case, we involve a lot of time series data. So in that case, we would use something called a recursive neural network or an RNN. That allows us to interpretate and make predictions based on time series data. An example of this would be using it for a sports betting algorithm. Personally, I've built one that has covered over 30 million record points for both MLB and NBA data. Secondly, we use CNN for interpreting visual data or imagery such as videos or pictures and converting them into numerical interpretations that a computer model would be able to translate. Using that data, it's often combined with other architectures such as a transformer neural network which allows us to make very complex translations, transcriptions, and conversions. A good example of something that uses transformer neural networks or TNNs are LLMs such as ChatGPT and other extensive or advanced AI models. That's it for today's class. I hope you guys learned something. See you in the next class. Bye bye."
    print("Final Transcript:")
    print(transcript)
    notes=openai_make_notes(transcript)
    notion_blocks=format_notes_for_notion(notes)
    notes_to_notion(notion_blocks)
